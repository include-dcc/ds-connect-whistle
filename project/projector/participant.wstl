// Participant

// We create both a Patient record as well as a basic ResearchSubject here for each
// subject specified

// I'm not seeing any specimen details in the data I have at the moment

// Description: Research Subject 
//
// Arguments:
//  study - This is the full study object created by Whistler
//  subject - Must have a patient_id
def ResearchSubject(study, subject) {
    meta.tag[]: StudyMeta(study);

    identifier[]: Key_Identifier(study, "ResearchSubject", subject.patient_id);
    identifier[0].use: "official";
    status: "on-study";
    study: Reference_Key_Identifier(study, "ResearchStudy", study.id);
    individual: Reference_Key_Identifier(study, "Patient", subject.patient_id);
    resourceType: "ResearchSubject";
}

// Description: Our Participant is basically a limited Patient record
//
// Arguments:
//  study - This is the full study object created by Whistler
//  subject - Must have a patient_id
// 
def Participant(study, subject) {
    meta.tag[]: StudyMeta(study);

    identifier[]: Key_Identifier(study, "Patient", subject.patient_id);
    identifier[0].use: "official";
    gender (if subject.gender ~= "."): HarmonizeAsCode(subject.gender, "gender");
    extension[]: RaceExtension(subject);
    extension[]: EthnicityExtension(subject);
    resourceType : "Patient"
}
def AgeAtExtension(study, subject, age, age_unit) {
    if (age_unit = "years"){
        url: "http://hl7.org/fhir/StructureDefinition/cqf-relativeDateTime";
        extension[0].url: "target";
        extension[0].valueReference: subject;
        extension[1].url: "targetPath";
        extension[1].valueString: "birthDate";
        extension[2].url: "relationship";
        extension[2].valueCode: "after";
        extension[3].url: "offset";
        extension[3].valueDuration.value: $ParseInt(age);
        //extension[3].valueDuration.unit: "a";
        extension[3].valueDuration.system: "http://unitsofmeasure.org";
        extension[3].valueDuration.code: "a";
        //extension[3].display: "years";
    }
    if (age_unit = "days"){
        
        url: "http://hl7.org/fhir/StructureDefinition/cqf-relativeDateTime";
        extension[0].url: "target";
        extension[0].valueReference: subject;
        extension[1].url: "targetPath";
        extension[1].valueString: "birthDate";
        extension[2].url: "relationship";
        extension[2].valueCode: "after";
        extension[3].url: "offset";
        extension[3].valueDuration.value: $ParseInt(age);
        extension[3].valueDuration.unit: "d";
        extension[3].valueDuration.system: "http://unitsofmeasure.org";
        extension[3].valueDuration.code: "days";
        //extension[3].display: "days";
    }
    if (age_unit = "YearsAsDays"){
        var days: $ParseFloat(age) * 365.25;
        var m: $Mod(days, 1);
        
        url: "http://hl7.org/fhir/StructureDefinition/cqf-relativeDateTime";
        extension[0].url: "target";
        extension[0].valueReference: subject;
        extension[1].url: "targetPath";
        extension[1].valueString: "birthDate";
        extension[2].url: "relationship";
        extension[2].valueCode: "after";
        extension[3].url: "offset";
        extension[3].valueDuration.value: days - m;
        extension[3].valueDuration.unit: "d";
        extension[3].valueDuration.system: "http://unitsofmeasure.org";
        extension[3].valueDuration.code: "days";
        //extension[3].display: "days";
    }    
}
// Definition: Construct basic Observation whose response is a code from a local vocabulary (i.e. categorial value)
//
// Arguments:
//  study - This is the full study object created by Whistler
//  questionnaire - This is the entire JSON representation of the IHQ form
//  qcode - The code/question id associated with the observation 
//  qvalue - list of checkbox objects. Each should have the following fields
//     - code Is the code associated with the checkbox's definition
//     - value is the response provided. This is likely "1" or missing
//  
def AtAtRegistrationObservation(study, subject) {
    var subject_id: subject.patient_id;
    var age_at: subject.age_at_registration;

    if (age_at?) {
        meta.tag[]: StudyMeta(study);

        identifier[]: Key_Identifier(study, "Observation", $StrCat(study.id, ".", subject_id, "age_at_registration"));
        identifier[0].use: "official";

        subject: Reference_Key_Identifier(study, "Patient", subject_id);
        focus[].identifier: Key_Identifier(study, "ObservationDefinition", DdVariableId(study.id, "demo", "age_at_registration"));
        code.text: HarmonizedLocalDisplay("age_at_registration", "demo");
        code.coding[]: HarmonizeMapped("age_at_registration", "demo");
        code.coding[]: LocalCodeSystemReference(study.id, "demo", "age_at_registration");
        
        var subref: Reference_Key_Identifier(study, "Patient", subject_id);
        _valueDateTime.extension[0]: AgeAtExtension(study, subref, age_at, "years");
        status: "final";
        resourceType: "Observation";
    }
}

def TraitObservation(study, subject, varname, value, tablename) {
    var subject_id: subject.patient_id;

    meta.tag[]: StudyMeta(study);

    identifier[]: Key_Identifier(study, "Observation", $StrCat(study.id, ".", subject_id, ".", varname));
    identifier[0].use: "official";
    subject: Reference_Key_Identifier(study, "Patient", subject_id);
    focus[].identifier: Key_Identifier(study, "ObservationDefinition", DdVariableId(study.id, tablename, varname));
    code.text: HarmonizedLocalDisplay(varname, tablename);
    code.coding[]: HarmonizeMapped(varname, tablename);
    code.coding[]: LocalCodeSystemReference(study.id, tablename, varname);

    valueCodeableConcept.coding[]: HarmonizeMapped(value, varname);
    valueCodeableConcept.text: value;
    
    status: "final";
    resourceType: "Observation";

}

def LocalCodeSystemReferenceSpecial(study, table_name, varname, code) {
    code: code;
    system: VocabularyURL(study, $StrCat(table_name, varname), "");
    display: HarmonizedLocalDisplay(code, table_name);
}


def RaceObservation(study, demo, race) {
    if (race.value?) {
        var subject_id: demo.patient_id;

        // Clean up the race_ prefix from the data so that it properly matches the data-dictionary
        var racecoding: race.code;
        var codeparts: $StrSplit(race.code, "_");
        var racecoding (if $ListLen(codeparts) > 1): codeparts[1];

        var varname: HarmonizedLocalDisplay(race.code, "race");

        meta.tag[]: StudyMeta(study);

        identifier[]: Key_Identifier(study, "Observation", $StrCat(study.id, ".", subject_id, ".", varname));
        identifier[0].use: "official";
        subject: Reference_Key_Identifier(study, "Patient", subject_id);
        focus[].identifier: Key_Identifier(study, "ObservationDefinition", DdVariableId(study.id, "demo", "race"));
        code.text: HarmonizedLocalDisplay(racecoding, "race");
        code.coding[]: HarmonizeMapped(racecoding, "demo");
        code.coding[]: LocalCodeSystemReferenceSpecial(study.id, "demo", "race", racecoding);

        valueCodeableConcept.coding[]: HarmonizeMapped(racecoding, "race");
        valueCodeableConcept.text: $StrCat(race.text);
        
        status: "final";
        resourceType: "Observation";
    }
}

// Description: Wrapper for generating Patient records
//
// Arguments:
//  study - This is the full study object created by Whistler
//  demo - Must have a patient_id
// 
def ProcessParticipant(study, demo) {
    out patient: Participant(study, demo);
    out observation: AtAtRegistrationObservation(study, demo);
    out observation: TraitObservation(study, demo, "gender", demo.gender, "demo");
    out observation: RaceObservation(study, demo, demo.race[]);
    out observation: TraitObservation(study, demo, "ethnicity", demo.ethnicity, "demo");
}

// Description: Wrapper for generating ResearchSubject records
//
// Arguments:
//  study - This is the full study object created by Whistler
//  demo - Must have a patient_id
// 
def ProcessResearchSubject(study, demo) {
    out research_study: ResearchSubject(study, demo);
}
